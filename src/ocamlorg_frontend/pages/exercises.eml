let exercises_sidebar
~exercises
=
let open Data in
let render_exercise_link (exercise : Exercise.t) =
  let href = "#" ^ exercise.number in
  Learn_layout.sidebar_link ~title:exercise.title ~href ~current:false
in
let exercise_sidebar_links_by_tag ?tag title =
  <%s! Learn_layout.sidebar_link_group title
    (Exercise.filter_tag ?tag exercises |> List.fold_left (fun a b -> a ^ render_exercise_link b) "")
  %>
in

  <%s! exercise_sidebar_links_by_tag ~tag:"list" "Lists" %>
  <%s! exercise_sidebar_links_by_tag ~tag:"arithmetic" "Arithmetic" %>
  <%s! exercise_sidebar_links_by_tag ~tag:"logic" "Logic and Codes" %>
  <%s! exercise_sidebar_links_by_tag ~tag:"binary-tree" "Binary Trees" %>
  <%s! exercise_sidebar_links_by_tag ~tag:"multiway-tree" "Multiway Trees" %>
  <%s! exercise_sidebar_links_by_tag ~tag:"graph" "Graphs" %>
  <%s! exercise_sidebar_links_by_tag "Miscellaneous" %>

let danger = function
  | `Beginner -> ""
  | `Intermediate -> "☡"
  | `Advanced -> "☡☡"

let difficulty_to_string = function
  | `Beginner -> "Beginner"
  | `Intermediate -> "Intermediate"
  | `Advanced -> "Advanced"

let render
?(difficulty_level = "All")
(exercises : Data.Exercise.t list)
=
Learn_layout.render
~title:"Exercises"
~description:"A list of exercises to work on your OCaml skills."
~canonical:Url.exercises
~active_top_nav_item:Header.Learn
~left_sidebar_html:(Some(exercises_sidebar ~exercises))
~right_sidebar_html:None
~current:Exercises @@
  <div class="prose prose-orange max-w-full">
    <div class="flex flex-col max-w-auto sm:flex-row sm:justify-between">
      <h1 class="font-bold mb-8">Exercises</h1>
      <div>
        <a href="https://github.com/ocaml/ocaml.org/issues/new" class="btn btn-sm font-normal bg-learn-area-orange"> 
          <span class="hidden sm:flex"><%s! Icons.command_line "w-5 h-5 mr-2" %></span> Want to contribute an exercise?
        </a>
      </div>
    </div>
    <div class="prose mt-5 prose-orange max-w-full mb-5 md:mt-0">
      <p>
        This section is inspired by
        <a href="https://www.ic.unicamp.br/~meidanis/courses/mc336/2006s2/funcional/L-99_Ninety-Nine_Lisp_Problems.html">
          Ninety-Nine Lisp Problems</a>
        which in turn was based on “<a href="https://sites.google.com/site/prologsite/prolog-problems/">Prolog problem
          list</a>” by Werner Hett. For
        each of these questions, some simple tests are shown—they may also serve
        to make the question clearer if needed. To work on these problems, we
        recommend you first <a href="<%s Url.getting_started %>">install OCaml</a> or use it <a
          href="<%s Url.playground %>">inside
          your browser</a>. The source of the following
        problems is available on
        <a href="https://github.com/ocaml/ocaml.org/tree/main/data/problems">GitHub</a>.
      </p>
      <p>
        Every exercise has a difficulty level, ranging from beginner to advanced.
        This difficulty level is indicated with the symbol "☡".
        The absence of marks represents the beginner level, one mark the intermediate level and two marks the advanced level.
      </p>
    </div>
    <div class="mt-10">
      <p class="font-normal prose mb-1">Select popular exercises for </p>
      <div id="difficulty-list" class="border-b border-solid border-zinc-300 leading-5 text-zinc-800">
        <ul class="flex flex-col list-none sm:flex-row sm:pl-0">
          <li class="w-full my-0 rounded-l-md  text-center border border-gray-300 px-4 py-2 sm:w-fit">
            <a class="appearance-none text-gray-300" href="/exercises?difficulty_level=beginner" onclick="toggleSelected(this, 'bg-teal-700', 'beginner')"> Beginner</a></li>
          <li class="w-full my-0 border border-gray-300 text-center px-4 py-2 sm:w-fit">
            <a class="appearance-none text-gray-300" href="/exercises?difficulty_level=intermediate" onclick="toggleSelected(this, 'bg-[#040113]', 'intermediate')"> Intermediate </a> </li>
          <li class="w-full my-0 border text-center border-gray-300 px-4 py-2 sm:w-fit">
            <a class="appearance-none text-gray-300" href="/exercises?difficulty_level=advanced" onclick="toggleSelected(this, 'bg-primary-700', 'advanced')"> Advanced </a> </li>
          <li class="w-full rounded-r-md text-center my-0 border border-gray-300 px-4 py-2 sm:w-fit">
            <a class="appearance-none text-gray-300" href="/exercises?difficulty_level=all" onclick="toggleSelected(this, 'bg-[#0E2A49]', 'all')"> Mixed Level </a> </li>
        </ul>
        <form action="<%s Url.exercises %>" method="GET">
          <label for="difficulty_level" class="sr-only">Difficulty</label>
          <%s! Forms.select
            ~attrs:{|id="difficulty_level" name="difficulty_level" onchange="this.form.submit()"|}
            ~options:[("All", "Any Difficulty"); ("beginner", "Beginner"); ("intermediate", "Intermediate"); ("advanced", "Advanced")]
            ~selected:difficulty_level
            "w-48" %>
        </form>
      </div>
    </div>
    <div class="grid grid-cols-1 gap-4 grid-flow-row auto-rows-max sm:grid-cols-2 md:grid-cols-3">
      <% exercises |> List.iter (fun (exercise : Data.Exercise.t) -> %>
          <div x-data="{statement: true}" id="<%s exercise.number %>">
            <%s! Learn_components.exercise_card exercise %>
          </div>
      <% ); %>
    </div>
  <script>
    const difficultyLevel = localStorage.getItem('selectedDifficultyLevel');
    
    if (difficultyLevel) {
      const item = document.querySelector(`#difficulty-list a[href$=${difficultyLevel}]`);
      if (item) {
        toggleSelected(item, `bg-${difficultyLevel}`);
      }
    }
    
    function toggleSelected(item, backgroundColorClass, difficultyLevel) {
      const listItems = document.querySelectorAll('#difficulty-list .flex li');
      listItems.forEach(li => li.classList.remove('bg-teal-700', 'bg-[#040113]', 'bg-primary-700', 'bg-[#0E2A49]'));

      item.parentElement.classList.add(backgroundColorClass);

      const listLinks = document.querySelectorAll('#difficulty-list .flex a');
      listLinks.forEach(a => a.classList.remove('text-white'));

      item.classList.add('text-white');
      
      // Store the selected difficulty level in local storage
      localStorage.setItem('selectedDifficultyLevel', difficultyLevel);
    }
  </script>